"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UiServiceGenerator = void 0;
const services_1 = require("../services");
/**
 *
 */
class UiServiceGenerator extends services_1.AdtService {
    /**
     * Configure the UI service generator.
     *
     * @param _config - The generator configuration.
     * @param bo - The business object.
     */
    configure(_config, bo) {
        this.bo = bo;
    }
    /**
     * Get the content of the service binding.
     *
     * @param pckg - The package name.
     * @returns The content of the service binding.
     */
    getContent(pckg) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.get('/content', {
                headers: {
                    Accept: 'application/vnd.sap.adt.repository.generator.content.v1+json'
                },
                params: {
                    referencedObject: this.bo.uri,
                    package: pckg
                }
            });
            const content = response.data;
            const contentObj = JSON.parse(content);
            if (!contentObj['metadata']) {
                contentObj['metadata'] = {
                    package: pckg
                };
            }
            return JSON.stringify(contentObj);
        });
    }
    /**
     * Generate the service binding.
     *
     * @param content - The content of the service binding.
     * @param transport - The transport.
     * @returns The object references.
     */
    generate(content, transport) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.post('', content, {
                headers: {
                    'Content-Type': 'application/vnd.sap.adt.repository.generator.content.v1+json',
                    Accept: 'application/vnd.sap.adt.repository.generator.v1+json, application/vnd.sap.as+xml;charset=UTF-8;dataname=com.sap.adt.StatusMessage'
                },
                params: {
                    referencedObject: this.bo.uri,
                    corrNr: transport
                }
            });
            // Service binding is in XML format, ready to be used for the subsequent activation and publish.
            const data = this.parseResponse(response.data);
            return data.objectReferences;
        });
    }
    /**
     * Lock the service binding. The class should be configured with the uri of the service binding
     * The uri is returned from the generate method.
     */
    lockServiceBinding() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.post('', '', {
                headers: {
                    Accept: 'application/*,application/vnd.sap.as+xml;charset=UTF-8;dataname=com.sap.adt.lock.result',
                    'x-sap-adt-sessiontype': 'stateful'
                },
                params: {
                    _action: `LOCK`,
                    accessMode: 'MODIFY'
                }
            });
        });
    }
}
exports.UiServiceGenerator = UiServiceGenerator;
//# sourceMappingURL=ui-service-generator.js.map