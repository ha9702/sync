"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BusinessObjectsService = void 0;
const adt_service_1 = require("./adt-service");
/**
 * BusinessObjectsService implements ADT requests to obtain the list of business objects.
 */
class BusinessObjectsService extends adt_service_1.AdtService {
    /**
     * Get ADT scheme ID.
     *
     * @returns AdtCategory
     */
    static getAdtCatagory() {
        return BusinessObjectsService.adtCategory;
    }
    /**
     * Get all business objects from ADT service.
     *
     * @param maxResults - The maximum number of business objects to be returned.
     * @returns A list of business objects.
     */
    getBusinessObjects(maxResults = 10000) {
        return __awaiter(this, void 0, void 0, function* () {
            const config = {
                headers: {
                    Accept: 'application/xml'
                },
                params: {
                    operation: 'quickSearch',
                    query: `*`,
                    maxResults: maxResults,
                    objectType: 'BDEF',
                    releaseState: 'USE_IN_CLOUD_DEVELOPMENT'
                }
            };
            const response = yield this.get('', config);
            return this.parseBOResponse(response.data);
        });
    }
    /**
     * Parse the XML document of business object entries from ADT service.
     *
     * @param xml xml document containing business object entries.
     * @returns A list of business object names.
     */
    parseBOResponse(xml) {
        var _a;
        const parsed = this.parseResponse(xml);
        let boArray = [];
        if ((_a = parsed === null || parsed === void 0 ? void 0 : parsed.objectReferences) === null || _a === void 0 ? void 0 : _a.objectReference) {
            if (Array.isArray(parsed.objectReferences.objectReference)) {
                boArray = parsed.objectReferences.objectReference;
            }
            else {
                boArray = [parsed.objectReferences.objectReference];
            }
        }
        return boArray.map((item) => {
            const { name, uri, description } = item;
            return { name, uri, description };
        });
    }
}
exports.BusinessObjectsService = BusinessObjectsService;
/**
 * @see AdtService.getAdtCatagory()
 */
BusinessObjectsService.adtCategory = {
    scheme: 'http://www.sap.com/adt/categories/respository',
    term: 'search'
};
//# sourceMappingURL=businessobjects-service.js.map