"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.deleteChange = exports.writeChange = exports.readChanges = void 0;
const fs_1 = require("fs");
const path_1 = require("path");
/**
 * Read changes from the file system and return them.
 *
 * @param project reference to the UI5 project
 * @param logger logger instance
 * @returns object with the file name as key and the file content as value
 */
function readChanges(project, logger) {
    return __awaiter(this, void 0, void 0, function* () {
        const changes = {};
        const files = yield project.byGlob('/**/changes/*.*');
        for (const file of files) {
            try {
                const change = JSON.parse(yield file.getString());
                changes[`sap.ui.fl.${(0, path_1.parse)(file.getName()).name}`] = change;
                logger.debug(`Read change from ${file.getPath()}`);
            }
            catch (error) {
                logger.warn(error.message);
            }
        }
        return changes;
    });
}
exports.readChanges = readChanges;
/**
 * Writes flex changes to the user's workspace.
 *
 * @param data JS object to be stored as change
 * @param data.fileName file name that is required for a valid change
 * @param data.fileType file type that is required
 * @param webappPath path to the webapp folder
 * @param fs mem-fs editor
 * @param logger logger instance
 * @returns object with success flag and optional message
 */
function writeChange(data, webappPath, fs, logger) {
    const fileName = data.fileName;
    const fileType = data.fileType;
    if (fileName && fileType) {
        logger.debug(`Write change ${fileName}.${fileType}`);
        const filePath = (0, path_1.join)(webappPath, 'changes', fileName + '.' + fileType);
        fs.writeJSON(filePath, data);
        const message = `FILE_CREATED ${fileName}.${fileType}`;
        return { success: true, message };
    }
    else {
        return { success: false };
    }
}
exports.writeChange = writeChange;
/**
 * Deletes an existing flex change from the file system if it exists.
 *
 * @param data JS object of the change to be deleted
 * @param data.fileName file name that is required for a valid change
 * @param webappPath path to the webapp folder
 * @param logger logger instance
 * @returns object with success flag and optional message
 */
function deleteChange(data, webappPath, logger) {
    var _a;
    const fileName = (_a = data.fileName) === null || _a === void 0 ? void 0 : _a.replace('sap.ui.fl.', '');
    if (fileName) {
        const path = (0, path_1.join)(webappPath, 'changes');
        if ((0, fs_1.existsSync)(path)) {
            const files = (0, fs_1.readdirSync)(path);
            const file = files.find((element) => element.includes(fileName));
            if (file) {
                logger.debug(`Write change ${file}`);
                const filePath = (0, path_1.join)(path, file);
                (0, fs_1.unlinkSync)(filePath);
                return { success: true, message: `FILE_DELETED ${file}` };
            }
        }
    }
    return { success: false };
}
exports.deleteChange = deleteChange;
//# sourceMappingURL=flex.js.map