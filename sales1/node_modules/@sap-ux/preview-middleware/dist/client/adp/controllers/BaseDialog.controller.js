"use strict";

sap.ui.define(["sap/ui/core/library", "sap/ui/core/mvc/Controller", "../utils"], function (sap_ui_core_library, Controller, ___utils) {
  "use strict";

  const ValueState = sap_ui_core_library["ValueState"];
  const matchesFragmentName = ___utils["matchesFragmentName"];
  /**
   * @namespace open.ux.preview.client.adp.controllers
   */
  const BaseDialog = Controller.extend("open.ux.preview.client.adp.controllers.BaseDialog", {
    onFragmentNameInputChange: function _onFragmentNameInputChange(event) {
      const input = event.getSource();
      const beginBtn = this.dialog.getBeginButton();
      const fragmentName = input.getValue();
      const fragmentList = this.model.getProperty('/fragmentList');
      const updateDialogState = function (valueState) {
        let valueStateText = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
        input.setValueState(valueState).setValueStateText(valueStateText);
        beginBtn.setEnabled(valueState === ValueState.Success);
      };
      if (fragmentName.length <= 0) {
        updateDialogState(ValueState.None);
        this.model.setProperty('/newFragmentName', null);
        return;
      }
      const fileExists = fragmentList.some(f => f.fragmentName === `${fragmentName}.fragment.xml`);
      if (fileExists) {
        updateDialogState(ValueState.Error, 'Enter a different name. The fragment name that you entered already exists in your project.');
        return;
      }
      const isValidName = /^[a-zA-Z_][a-zA-Z0-9_-]*$/.test(fragmentName);
      if (!isValidName) {
        updateDialogState(ValueState.Error, 'The fragment name cannot contain white spaces or special characters.');
        return;
      }
      if (fragmentName.length > 64) {
        updateDialogState(ValueState.Error, 'A fragment file name cannot contain more than 64 characters.');
        return;
      }
      const changeExists = this.checkForExistingChange(fragmentName);
      if (changeExists) {
        updateDialogState(ValueState.Error, 'Enter a different name. The fragment name entered matches the name of an unsaved fragment.');
        return;
      }
      updateDialogState(ValueState.Success);
      this.model.setProperty('/newFragmentName', fragmentName);
    },
    checkForExistingChange: function _checkForExistingChange(fragmentName) {
      const allCommands = this.rta.getCommandStack().getCommands();
      return allCommands.some(command => {
        if (command?.getProperty('name') === 'composite') {
          const addXmlCommand = command.getCommands().find(c => c?.getProperty('name') === 'addXMLAtExtensionPoint');
          return addXmlCommand && matchesFragmentName(addXmlCommand, fragmentName);
        } else {
          return matchesFragmentName(command, fragmentName);
        }
      });
    },
    setEscapeHandler: function _setEscapeHandler() {
      this.dialog.setEscapeHandler(_ref => {
        let {
          resolve
        } = _ref;
        this.handleDialogClose();
        resolve();
      });
    },
    handleDialogClose: function _handleDialogClose() {
      this.dialog.close();
      this.dialog.destroy();
    }
  });
  return BaseDialog;
});
//# sourceMappingURL=BaseDialog.controller.js.map